name: Build and Package Chrome Extension

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-crx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Build extension
        run: npm run build

      - name: Install zip and openssl for CRX creation
        run: sudo apt-get update && sudo apt-get install -y zip openssl

      - name: Generate private key (if not present)
        run: |
          if [ ! -f key.pem ]; then openssl genrsa -out key.pem 2048; fi

      - name: Install crx3 for packaging
        run: npm install -g crx3

      - name: Build .crx file using crx3
        run: |
          npm run crx

      - name: Zip extension source for distribution
        run: |
          npm run pack

      - name: Upload .crx artifact
        uses: actions/upload-artifact@v4
        id: upload-crx
        with:
          name: family-privacy-extension-crx-v${{ github.run_number }}
          path: extension.crx
          retention-days: 90

      # - name: Upload .zip artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: family-privacy-extension-zip-v${{ github.run_number }}
      #     path: extension.zip
      #     retention-days: 90

      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        id: upload-dist
        with:
          name: family-privacy-extension-dist-v${{ github.run_number }}
          path: dist/
          retention-days: 90

      - name: Get artifact URLs
        id: get-artifacts
        run: |
          # Get artifacts for this run
          ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts")
          
          # Extract artifact IDs
          CRX_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name | contains("crx")) | .id')
          DIST_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name | contains("dist")) | .id')
          
          # Set outputs
          echo "crx_artifact_id=$CRX_ARTIFACT_ID" >> $GITHUB_OUTPUT
          echo "dist_artifact_id=$DIST_ARTIFACT_ID" >> $GITHUB_OUTPUT

      - name: Notify backend of new build
        run: |
          curl -X POST https://pf-backend-x6xf.onrender.com/api/v1/extensions \
            -H "Content-Type: application/json" \
            -d '{
              "buildNumber": "v${{ github.run_number }}",
              "buildDescription": "${{ github.event.head_commit.message }}",
              "author": "${{ github.actor }}",
              "commitId": "${{ github.sha }}",
              "packedExtensionUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.get-artifacts.outputs.crx_artifact_id }}",
              "unpackedExtensionUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.get-artifacts.outputs.dist_artifact_id }}",
              "secret": "${{ secrets.BACKEND_AUTH }}"
            }'

      - name: Send .crx file to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_USER_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: MarkdownV2
          message: |
            🚀 *Chrome Extension Build Complete\!*
            
            📦 *Repository:* `${{ github.repository }}`
            🌿 *Branch:* `${{ github.ref_name }}`
            💾 *Commit:* `${{ github.sha }}`
            👤 *Author:* `${{ github.actor }}`
            🏗️ *Build:* `#${{ github.run_number }}`
            
            📝 *Commit Message:*
            `${{ github.event.head_commit.message }}`
            
            ✅ Extension \.crx file is ready for installation\!
          document: extension.crx

      # - name: Send .zip file to Telegram
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_USER_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     format: MarkdownV2
      #     message: |
      #       📋 *Extension Source Package*
            
      #       This is the distributable zip file containing all extension source files\.
      #     document: extension.zip
